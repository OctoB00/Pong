using System;
using SFML.System;
using SFML.Window;
using SFML.Graphics;

namespace BouncingBall
{
    class Ball
    {
        public RectangleShape shape;
        public Vector2f velocity;
        private float marginX;

        public Ball()
        {
            shape = new RectangleShape(new Vector2f(20, 20));
            shape.Origin = shape.Size / 2;
            shape.FillColor = Color.White;
            marginX = shape.Size.X;
        }

        public void AddSpeed(Vector2f speed)
        {
            velocity += speed;
        }
        public void Update(float deltaTime)
        {
            Vector2f newPosition = shape.Position + velocity * deltaTime;

            if (newPosition.Y + shape.Origin.Y > Program.ScreenH
                || newPosition.Y - shape.Origin.Y < 0)
            {
                velocity = new Vector2f(velocity.X, -velocity.Y);
            }
            else
            {
                shape.Position = newPosition;
            }
        }
        public void Render(RenderWindow window)
        {
            window.Draw(shape);
        }
        public void Collision(RectangleShape shape2)
        {
            if (shape.GetGlobalBounds().Intersects(shape2.GetGlobalBounds())) 
            {
                Vector2f newPos = shape.Position;

                if (velocity.X < 0)
                {
                    newPos.X = shape2.Position.X + shape2.Size.X / 2 + marginX;
                }
                if (velocity.X > 0)
                {
                    newPos.X = shape2.Position.X - shape2.Size.X / 2 - marginX;
                }
                velocity.X = velocity.X * -1;

                shape.Position = newPos;
            }
        }
        public bool IsOutside()
        {
            if (shape.Position.X - marginX > Program.ScreenW)
            {
                return true;
            }
            else if (shape.Position.X + marginX < 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        public void Reset()
        {
            shape.Position = new Vector2f(Program.ScreenW / 2, Program.ScreenH / 2);
            velocity.X = -velocity.X;
        }
    }
    class Line
    {
        public RectangleShape line;
        public Vector2f velocity;

        public Line()
        {
            this.line = new RectangleShape(new Vector2f(10, 100));
            this.line.Origin = new Vector2f(5, 50);
            line.FillColor = Color.White;
        }

        public void Move(Vector2f speed)
        {
            velocity = speed;
        }
        public void Update(float deltaTime)
        {
            Vector2f newPosition = line.Position + velocity * deltaTime;

            if (newPosition.Y + line.Origin.Y > 599
                || newPosition.Y - line.Origin.Y < 1)
            {
                velocity = new Vector2f(0, 0);
            }
            else
            {
                line.Position = newPosition;
            }
        }
        public void Render(RenderWindow window)
        {
            window.Draw(line);
        }
    }
    class Score
    {
        private Text leftShape;
        private Text rightShape;
        private int leftScore;
        private int rightScore;
        private const int FontSize = 18;
        private const int Margin = 20;

        public Score(Font font)
        {
            leftShape = new Text("", font, FontSize);
            rightShape = new Text("", font, FontSize);
            UpdateText();
        }
        public void ScoreLeft()
        {
            leftScore++;
            UpdateText();
        }
        public void ScoreRight()
        {
            rightScore++;
            UpdateText();
        }
        public void UpdateText()
        {
            leftShape.DisplayedString = $"Score: {leftScore}";
            leftShape.Position = new Vector2f(Margin, Margin);
            leftShape.Origin = new Vector2f(0, 0);

            rightShape.DisplayedString = $"Score: {rightScore}";
            rightShape.Position = new Vector2f(Program.ScreenW - Margin, Margin);
            rightShape.Origin = new Vector2f(rightShape.GetLocalBounds().Width, 0);
        }
        public void Render(RenderWindow w)
        {
            w.Draw(leftShape);
            w.Draw(rightShape);
        }
    }
    class Program
    {
        public const int ScreenW = 800;
        public const int ScreenH = 600;
        static void Main(string[] args)
        {
            using (var window = new RenderWindow(new VideoMode(ScreenW, ScreenH), "Pong"))
            {
                window.Closed += (s, e) => window.Close();
                Clock frameClock = new Clock();
                Ball ball = new Ball();
                Score score = new Score(new Font("Minecraftia-Regular.ttf"));
                ball.shape.Position = new Vector2f(ScreenW / 2, ScreenH / 2);
                ball.AddSpeed(new Vector2f(100, 200));
                Line line1 = new Line();
                Line line2 = new Line();
                line1.line.Position = new Vector2f(50, 300);
                line2.line.Position = new Vector2f(750, 300);
                string pressedKey = "";
                window.KeyPressed += (s, e) =>
                {
                    if (e.Code == Keyboard.Key.Up)
                    {
                        pressedKey = "Up";
                    }
                    else if (e.Code == Keyboard.Key.Down)
                    {
                        pressedKey = "Down";
                    }
                    else if (e.Code == Keyboard.Key.W)
                    {
                        pressedKey = "W";
                    }
                    else if (e.Code == Keyboard.Key.S)
                    {
                        pressedKey = "S";
                    }
                };
                window.KeyReleased += (s, e) =>
                {
                    if (e.Code == Keyboard.Key.Up)
                    {
                        pressedKey = "Nothing2";
                    }
                    else if (e.Code == Keyboard.Key.Down)
                    {
                        pressedKey = "Nothing2";
                    }
                    else if (e.Code == Keyboard.Key.W)
                    {
                        pressedKey = "Nothing1";
                    }
                    else if (e.Code == Keyboard.Key.S)
                    {
                        pressedKey = "Nothing1";
                    }
                };


                while (window.IsOpen)
                {
                    window.DispatchEvents();
                    window.Clear(new Color(0, 0, 0));
                    float deltaTime = frameClock.Restart().AsSeconds();
                    ball.Update(deltaTime);
                    ball.Render(window);
                    line1.Update(deltaTime);
                    line1.Render(window);
                    line2.Update(deltaTime);
                    line2.Render(window);
                    switch (pressedKey)
                    {
                        case "Up": line2.Move(new Vector2f(0, -200)); break;
                        case "Down": line2.Move(new Vector2f(0, 200)); break;
                        case "W": line1.Move(new Vector2f(0, -200)); break;
                        case "S": line1.Move(new Vector2f(0, 200)); break;
                        case "Nothing1": line1.Move(new Vector2f(0, 0)); break;
                        default: line2.Move(new Vector2f(0, 0)); break;
                    }
                    ball.Collision(line1.line);
                    ball.Collision(line2.line);
                    if (ball.IsOutside())
                    {
                        if (ball.shape.Position.X > ScreenW / 2)
                        {
                            score.ScoreLeft();
                        }
                        else
                        {
                            score.ScoreRight();
                        }
                        ball.Reset();
                    }
                    score.Render(window);


                    window.Display();
                }
            }
        }
    }
}
