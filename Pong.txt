using System;
using SFML.System;
using SFML.Window;
using SFML.Graphics;

namespace BouncingBall
{
    class Ball
    {
        public RectangleShape shape;
        public Vector2f velocity;

        public Ball()
        {
            this.shape = new RectangleShape(new Vector2f(20, 20));
            this.shape.Origin = new Vector2f(10, 10);
            shape.FillColor = Color.Red;
        }

        public void AddForce(Vector2f force)
        {
            velocity += force;
        }
        public void Update(float deltaTime)
        {
            Vector2f newPosition = shape.Position + velocity * deltaTime;

            if (newPosition.Y + shape.Origin.Y > 600
                || newPosition.Y - shape.Origin.Y < 0)
            {
                velocity = new Vector2f(velocity.X, -velocity.Y);
            }
            else if (newPosition.X - shape.Origin.X < 0
                 || newPosition.X + shape.Origin.X > 800)
            {
                velocity = new Vector2f(-velocity.X, velocity.Y);
            }
            else
            {
                shape.Position = newPosition;
            }
        }
        public void Render(RenderTarget target)
        {
            target.Draw(shape);
        }
        public FloatRect GetBounds()
        {
            shape.GetGlobalBounds();
        }
    }
    class Line
    {
        public RectanlgeShape line;
        public Vector2f velocity;

        public Line()
        {
            this.line = new RectanlgeShape(new Vector2f(100, 10));
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            using (var window = new RenderWindow(new VideoMode(800, 600), "Bouncing Ball"))
            {
                window.Closed += (s, e) => window.Close();
                Clock frameClock = new Clock();
                Ball ball = new Ball();
                ball.shape.Position = new Vector2f(100, 30);
                ball.AddForce(new Vector2f(100, 200));

                while (window.IsOpen)
                {
                    window.DispatchEvents();
                    window.Clear(new Color(131, 197, 235));
                    float deltaTime = frameClock.Restart().AsSeconds();
                    ball.Update(deltaTime);
                    ball.Render(window);

                    window.Display();
                }
            }
        }
    }
}